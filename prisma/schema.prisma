// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["fullTextSearch", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  en
  ro
}

enum Role {
  admin
  user
}

enum EStatus {
  nproc
  validated
  uploaded
  invalid
  valid
  store
}

enum AttachmentType {
  creditNote
  internationalExpense
  nationalExpense
  tripExpense
  document
  eFactura
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  hash      String
  language  Language  @default(en)
  role      Role      @default(user)
  active    Boolean   @default(false)
  invoices  Invoice[]
  messages  Message[]
  createdAt DateTime? @default(now()) @db.Timestamp
  updatedAt DateTime? @updatedAt @db.Timestamp
}

model Setting {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  value String[]
  type  String
  multi Boolean
}

model Vehicle {
  id           Int          @id @default(autoincrement())
  registration String?
  vin          String       @unique
  category     String?
  active       Boolean      @default(true)
  nickname     String?
  documents    Document[]
  creditNotes  CreditNote[]
  repairs      Repair[]
  createdAt    DateTime?    @default(now()) @db.Timestamp
  updatedAt    DateTime?    @updatedAt @db.Timestamp
}

model CreditNote {
  id         Int         @id @default(autoincrement())
  orderNr    Int?
  number     String
  amount     Decimal     @db.Decimal(8, 2)
  currency   String      @default("EUR")
  start      String?
  end        String?
  week       Int?
  notes      String?
  vehicleId  Int?
  vehicle    Vehicle?    @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  invoiceId  Int?
  invoice    Invoice?    @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  attachment Attachment?
  createdAt  DateTime?   @default(now()) @db.Timestamp
  updatedAt  DateTime?   @updatedAt @db.Timestamp
}

model Company {
  id                   Int                    @id @default(autoincrement())
  name                 String
  registration         String?
  vatNumber            String                 @unique
  vatValid             Boolean?               @default(false)
  accRon               String?
  accEur               String?
  address              String?
  county               String?
  country              String
  bank                 String?
  capital              String?
  email                String?
  phone                String?
  invoices             Invoice[]
  NationalExpense      NationalExpense[]
  InternationalExpense InternationalExpense[]
  createdAt            DateTime?              @default(now()) @db.Timestamp
  updatedAt            DateTime?              @updatedAt @db.Timestamp
}

model Invoice {
  id             Int             @id @default(autoincrement())
  number         String
  date           DateTime        @db.Date
  amount         Decimal         @db.Decimal(8, 2)
  currency       String          @default("EUR")
  vatRate        Int             @default(0)
  bnr            String?
  bnrAt          DateTime?       @db.Date
  orders         Order[]
  creditNotes    CreditNote[]
  paymentTerms   String          @default("30 de zile")
  clientId       Int
  client         Company         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  identification Identification?
  createdBy      User?           @relation(fields: [createdById], references: [id])
  createdById    Int?
  EFactura       EFactura?
  createdAt      DateTime?       @default(now()) @db.Timestamp
  updatedAt      DateTime?       @updatedAt @db.Timestamp
}

model EFactura {
  id         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  xml        String?          @db.Xml
  uploadId   String?          @unique
  downloadId String?          @unique
  status     EStatus          @default(nproc)
  invoice    Invoice?         @relation(fields: [invoiceId], references: [id])
  invoiceId  Int?             @unique
  expense    NationalExpense? @relation(fields: [expenseId], references: [id])
  expenseId  Int?             @unique
  attachment Attachment?
  createdAt  DateTime?        @default(now()) @db.Timestamp
  updatedAt  DateTime?        @updatedAt @db.Timestamp
}

model Identification {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expName   String?
  expId     String?
  expVeh    String?
  Invoice   Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId Int       @unique
  createdAt DateTime? @default(now()) @db.Timestamp
  updatedAt DateTime? @updatedAt @db.Timestamp
}

model Order {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String
  amount      Decimal   @db.Decimal(8, 2)
  quantity    Decimal   @db.Decimal(8, 2)
  total       Decimal   @db.Decimal(8, 2)
  currency    String    @default("EUR")
  invoice     Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   Int
  createdAt   DateTime? @default(now()) @db.Timestamp
  updatedAt   DateTime? @updatedAt @db.Timestamp
}

model NationalExpense {
  id          Int         @id @default(autoincrement())
  number      String
  date        DateTime    @db.Date
  description String?
  amount      Decimal     @db.Decimal(8, 2)
  paidBy      String?
  supplierId  Int
  supplier    Company     @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  attachment  Attachment?
  EFactura    EFactura?
  createdAt   DateTime?   @default(now()) @db.Timestamp
  updatedAt   DateTime?   @updatedAt @db.Timestamp
}

model InternationalExpense {
  id          Int         @id @default(autoincrement())
  number      String
  date        DateTime    @db.Date
  description String
  amount      Decimal     @db.Decimal(8, 2)
  currency    String      @default("EUR")
  supplierId  Int
  supplier    Company     @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  attachment  Attachment?
  createdAt   DateTime?   @default(now()) @db.Timestamp
  updatedAt   DateTime?   @updatedAt @db.Timestamp
}

model TripExpense {
  id           Int         @id @default(autoincrement())
  intNr        Int         @unique
  number       String?
  date         DateTime    @db.Date
  description  String
  amount       Decimal     @db.Decimal(8, 2)
  currency     String      @default("EUR")
  amountEur    Decimal     @db.Decimal(8, 2)
  card         Boolean     @default(true)
  attachment   Attachment?
  TripReport   TripReport? @relation(fields: [tripReportId], references: [id], onDelete: SetNull)
  tripReportId Int?
  createdAt    DateTime    @default(now()) @db.Timestamp
  updatedAt    DateTime    @updatedAt @db.Timestamp
}

model TripReport {
  id        Int           @id @default(autoincrement())
  expenses  TripExpense[]
  createdAt DateTime      @default(now()) @db.Timestamp
  updatedAt DateTime      @updatedAt @db.Timestamp
}

model Employee {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String
  ssn       String     @unique
  active    Boolean    @default(true)
  payments  Payment[]
  documents Document[]
  createdAt DateTime   @default(now()) @db.Timestamp
  updatedAt DateTime   @updatedAt @db.Timestamp
}

model Payment {
  id             Int             @id @default(autoincrement())
  salaryRon      Decimal         @db.Decimal(8, 2)
  salaryEur      Decimal         @db.Decimal(8, 2)
  month          String
  indemnizations Indemnization[]
  employee       Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId     Int
  createdAt      DateTime?       @default(now()) @db.Timestamp
  updatedAt      DateTime        @updatedAt @db.Timestamp
}

model Document {
  id          Int         @id @default(autoincrement())
  description String
  expire      DateTime?   @db.Date
  comment     String?
  Employee    Employee?   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId  Int?
  attachment  Attachment?
  Vehicle     Vehicle?    @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId   Int?
  createdAt   DateTime    @default(now()) @db.Timestamp
  updatedAt   DateTime    @updatedAt @db.Timestamp
}

model Indemnization {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startDate  DateTime
  perDay     Int
  days       Int
  avans      Decimal   @db.Decimal(8, 2)
  rest       Decimal   @db.Decimal(8, 2)
  total      Decimal   @db.Decimal(8, 2)
  delegation Boolean
  Payment    Payment?  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId  Int?
  createdAt  DateTime? @default(now()) @db.Timestamp
  updatedAt  DateTime? @updatedAt @db.Timestamp
}

model Repair {
  id        Int       @id @default(autoincrement())
  date      DateTime? @db.Date
  km        Int?
  comment   String
  vehicleId Int
  vehicle   Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now()) @db.Timestamp
  updatedAt DateTime? @updatedAt @db.Timestamp
}

model Attachment {
  id                     Int                   @id @default(autoincrement())
  type                   AttachmentType
  name                   String
  creditNote             CreditNote?           @relation(fields: [creditNoteId], references: [id], onDelete: Cascade)
  creditNoteId           Int?                  @unique
  nationalExpense        NationalExpense?      @relation(fields: [nationalExpenseId], references: [id], onDelete: Cascade)
  nationalExpenseId      Int?                  @unique
  internationalExpense   InternationalExpense? @relation(fields: [internationalExpenseId], references: [id], onDelete: Cascade)
  internationalExpenseId Int?                  @unique
  tripExpense            TripExpense?          @relation(fields: [tripExpenseId], references: [id], onDelete: Cascade)
  tripExpenseId          Int?                  @unique
  document               Document?             @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId             Int?                  @unique
  eFactura               EFactura?             @relation(fields: [eFacturaId], references: [id], onDelete: Cascade)
  eFacturaId             String?               @unique @db.Uuid
  createdAt              DateTime?             @default(now()) @db.Timestamp
  updatedAt              DateTime?             @updatedAt @db.Timestamp
}

model Message {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status    String
  content   String
  users     User[]
  createdAt DateTime? @default(now()) @db.Timestamp
  updatedAt DateTime? @updatedAt @db.Timestamp
}
